LETTER: [a-zA-Z_];
DIGIT: [0-9];
LETDIG: DIGIT | LETTER;
ID: LETTER LETDIG*;
NUMCONST: DIGIT+;
CHARCONST: '\'' ( '\\'. | ~[\\] ) '\'';
STRINGCONST: '"' ('\\"'|.)*? '"' ;
WHITESPACE: [ \r\t\n]+ -> skip ;
COMMENT:  '//' ~'\n'*? -> skip ;


//basics

    //start
    program: (statementList | function)+ ; 

    //Variables
    varDeclaration: ID ':' type ';';
    type: 'int' | 'bool' | 'char' | ID | 'Unit' ;
    varInitialize: ID '=' (LETDIG)+ ';' | ID':' type '=' (LETDIG)+';';
    varExpression: varDeclaration | varInitialize

    value: ID | (LETDIG)+ | random ;
    valueList: value ',' valueList ;

    //functions
    function: functionHead functionBody
    functionHead: 'def' ID '('parameter'):' type'=' ;
    parameter: ID':' typeSpecifier | parameter ',' parameter ;
    functionBody: '{ statementList }' | statement ; 

    //statement
    statement: ifExpression | loopExpression| varExpression | roomDefiniton | connectStatement | javaExpression;
    statementList: (statement)+ ;



    ifExpression: 'if(' boolExpression ')' ('{'statementList'}'|statement)  (elseExpression)?  ;
    elseExpression: 'else' ('{'statementList'}'| statement) ;
    loopExpression: whileExpression | forExpression ; 
    whileExpression: 'while(' boolExpression ')' ('{'statementList'}'|statement) ;
    forExpression:  'for(' (varInitialize|ID) ',' boolExpression ',' mathExpression')' ('{'statementList'}'|statement) ;

    //todo basic experssions like =, +, -, and, or etc.  




//todo ergÃ¤nzen um statements in den zuweisungen. z.B if(bool)      point 1= (3,3)

//rooms
    roomDefiniton: 'def room:' ID '{' pointList',' monsterList',' itemList',' trapList'}'
    pointList: 'points[' point, point] ;
    point: '('NUMCONST','NUMCONST')' (','point)? ;
    monsterList: 'monsters['IDList']' ;
    itemList: 'items[' IDList ']' ;
    trapList: 'items[' IDList ']' ;
    IDList: ID | ID ',' IDList ; 
    connectStatement: 'connect' ID '->' ID';' ; 

//working with java objets 
    //for Readability (could be class names, var names etc.)
    javaID: ID ;
    javaDecleration: ID ':' javaID ';' ; 
    javaInitialize: (ID| ID':'javaID) '= new' javaID '('valueList');';
    javaSet: ID'.'javaID '='value';' | ;
    templateDefinition: 'template' ID 'is' javaID'(' parameter ')' ':={' statementList '}' 
    javaExpression: javaDecleration | javaInitialize | javaSet | templateDefinition

// tools
    toolExpression: random
    random: 'random('ID','ID')' | 'random('value','value')';